# TODO(thismarvin): Add a target for bin/release/desktop/resources and one for debug too!

EXC := ltlr

CC := gcc
FLAGS := -std=c17 -Wall -Wextra -Wpedantic -DPLATFORM_DESKTOP
DEBUG_FLAGS := -g -pg -O0
RELEASE_FLAGS := -O3

INCLUDE_FLAGS := -Ivendor/raylib/src
LIBRARY_FLAGS := -lm -lpthread -ldl -Lbuild/vendor/raylib/desktop -lraylib

LIB_RAYLIB := build/vendor/raylib/desktop/libraylib.a

GAME_HEADERS := $(shell find src -type f -name "*.h")
GAME_SOURCES := $(shell find src -type f -name "*.c")
CONTENT_SOURCES := $(shell find src/resources -type f)

DEBUG_OBJECTS := $(patsubst src/%.c,build/debug/desktop/%.o, $(GAME_SOURCES))
RELEASE_OBJECTS := $(patsubst src/%.c,build/release/desktop/%.o, $(GAME_SOURCES))

DEBUG_DESKTOP_CONTENT := $(patsubst src/resources/%,bin/debug/desktop/resources/%, $(CONTENT_SOURCES))
RELEASE_DESKTOP_CONTENT := $(patsubst src/resources/%,bin/release/desktop/resources/%, $(CONTENT_SOURCES))

$(VERBOSE).SILENT:

.PHONY: all
all: clean release

build:
	mkdir $@

build/debug: | build
	mkdir $@

build/release: | build
	mkdir $@

build/debug/desktop: | build/debug
	mkdir $@

build/release/desktop: | build/release
	mkdir $@

build/vendor: | build
	mkdir $@

build/vendor/raylib: | build/vendor
	mkdir $@

build/vendor/raylib/desktop: | build/vendor/raylib
	mkdir $@

bin:
	mkdir $@

bin/debug: | bin
	mkdir $@

bin/release: | bin
	mkdir $@

bin/debug/desktop: | bin/debug
	mkdir $@

bin/release/desktop: | bin/release
	mkdir $@

bin/debug/desktop/resources: | bin/debug/desktop
	mkdir $@

bin/release/desktop/resources: | bin/release/desktop
	mkdir $@

vendor/raylib/src:
	git submodule update --init --recursive

$(LIB_RAYLIB): | vendor/raylib/src build/vendor/raylib/desktop
	cd vendor/raylib/src; make PLATFORM=PLATFORM_DESKTOP
	mv vendor/raylib/src/libraylib.a build/vendor/raylib/desktop
	find vendor/raylib/src -name "*.o" -exec mv {} build/vendor/raylib/desktop \;

$(DEBUG_OBJECTS): build/debug/desktop/%.o: src/%.c $(MAKEFILE_LIST) $(LIB_RAYLIB) $(GAME_HEADERS) | build/debug/desktop
	$(CC) $(INCLUDE_FLAGS) $(FLAGS) $(DEBUG_FLAGS) -o $@ -c $<

bin/debug/desktop/$(EXC): $(DEBUG_OBJECTS) $(CONTENT_SOURCES) | bin/debug/desktop
	$(CC) $(FLAGS) $(DEBUG_FLAGS) -o $@ $(DEBUG_OBJECTS) $(LIBRARY_FLAGS)
	cp -r src/resources bin/debug/desktop
	
$(DEBUG_DESKTOP_CONTENT): bin/debug/desktop/resources/%: src/resources/% | bin/debug/desktop/resources
	cp $< bin/debug/desktop/resources

$(RELEASE_OBJECTS): build/release/desktop/%.o: src/%.c $(MAKEFILE_LIST) $(LIB_RAYLIB) $(GAME_HEADERS) | build/release/desktop
	$(CC) $(INCLUDE_FLAGS) $(FLAGS) $(RELEASE_FLAGS) -o $@ -c $<

bin/release/desktop/$(EXC): $(RELEASE_OBJECTS) $(CONTENT_SOURCES) | bin/release/desktop
	$(CC) $(FLAGS) $(RELEASE_FLAGS) -o $@ $(RELEASE_OBJECTS) $(LIBRARY_FLAGS)
	cp -r src/resources bin/release/desktop

$(RELEASE_DESKTOP_CONTENT): bin/release/desktop/resources/%: src/resources/% | bin/release/desktop/resources
	cp $< bin/release/desktop/resources

.PHONY: debug
debug: bin/debug/desktop/$(EXC) $(DEBUG_DESKTOP_CONTENT)
	@echo Done

.PHONY: dev
dev: debug
	cd bin/debug/desktop; ./$(EXC)
	gprof bin/debug/desktop/$(EXC) bin/debug/desktop/gmon.out > bin/debug/desktop/profile

.PHONY: release
release: bin/release/desktop/$(EXC) $(RELEASE_DESKTOP_CONTENT)
	@echo Done

.PHONY: clean
clean:
	if [ -d "build/vendor/raylib/desktop" ]; then rm -rf build/vendor/raylib/desktop; fi
	if [ -d "build/debug/desktop" ]; then rm -rf build/debug/desktop; fi
	if [ -d "build/release/desktop" ]; then rm -rf build/release/desktop; fi
	if [ -d "bin/debug/desktop" ]; then rm -rf bin/debug/desktop; fi
	if [ -d "bin/release/desktop" ]; then rm -rf bin/release/desktop; fi
	@echo "Done"
